//create statements

CREATE TABLE EMPLOYEE(EMP_SSN INTEGER,NAME VARCHAR(100),TELEPHONE INTEGER UNIQUE,DEPENDANT VARCHAR(100),START_DATE DATE,DURATION INTEGER,BANK_NAME VARCHAR(100),PRIMARY KEY(EMP_SSN));
CREATE TABLE BANKS(BANK_NAME VARCHAR(100), CITY VARCHAR(100) UNIQUE,MANAGER_SSN INTEGER,PRIMARY KEY(BANK_NAME),FOREIGN KEY(MANAGER_SSN) REFERENCES EMPLOYEE(EMP_SSN));
ALTER TABLE EMPLOYEE ADD FOREIGN KEY(BANK_NAME) REFERENCES BANKS(BANK_NAME);
CREATE TABLE ACCOUNTS(ACC_NO INTEGER,BALANCE DOUBLE, LAST_ACCESS_DATE DATE, ACC_TYPE VARCHAR(100),OVERDRAFT DOUBLE,INTEREST_RATE INTEGER,ACC_LIMIT DOUBLE,RATE_OF_INTEREST INTEGER,CREDIT_SCORE INTEGER,PRIMARY KEY(ACC_NO));
CREATE TABLE MAINTAINS(CUS_SSN INTEGER,ACC_NO INTEGER,FOREIGN KEY(CUS_SSN) REFERENCES CUSTOMERS(CUS_SSN),FOREIGN KEY(ACC_NO) REFERENCES ACCOUNTS(ACC_NO));
CREATE TABLE TRANSACTIONS(ACC_NO INTEGER,TRANS_TYPE VARCHAR(100),AMOUNT DOUBLE,DATE_OF_TRANSACTION DATE,FOREIGN KEY(ACC_NO) REFERENCES ACCOUNTS(ACC_NO));
CREATE TABLE LOANS(LOAN_ID INTEGER,LOAN_AMOUNT DOUBLE,PRIMARY KEY(LOAN_ID),OWE double);
CREATE TABLE PAYMENTS(LOAN_ID INTEGER,PAYMENT_ID INTEGER, PAY_AMOUNT DOUBLE, DATE_OF_PAYMENT DATE,FOREIGN KEY(LOAN_ID) REFERENCES LOANS(LOAN_ID));
CREATE TABLE TAKES(CUS_SSN INTEGER,LOAN_ID INTEGER, FOREIGN KEY(CUS_SSN) REFERENCES CUSTOMERS(CUS_SSN),FOREIGN KEY (LOAN_ID) REFERENCES LOANS(LOAN_ID));



//triggers
create trigger flagger1
after insert 
on accounts for each row
begin
if overdraft>0 then
print 'Hey recent transaction has exceeded his overdraft amount' ;
endif;
end;

create trigger flagger2
after update 
on employee for each row
begin
if duration>10 then
print 'Happy 10 Year Anniversary' ;
endif;
end;

