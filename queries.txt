-- CREATE TABLE BANKS(BANK_NAME VARCHAR(100), CITY VARCHAR(100) UNIQUE,MANAGER_SSN INTEGER,PRIMARY KEY(BANK_NAME),FOREIGN KEY(MANAGER_SSN) REFERENCES EMPLOYEE(EMP_SSN));
-- ALTER TABLE BANKS ADD FOREIGN KEY(MANAGER_SSN) REFERENCES EMPLOYEE(EMP_SSN);
-- CREATE TABLE EMPLOYEE(EMP_SSN INTEGER,NAME VARCHAR(100),TELEPHONE INTEGER UNIQUE,DEPENDANT VARCHAR(100),START_DATE DATE,DURATION INTEGER,BANK_NAME VARCHAR(100),PRIMARY KEY(EMP_SSN));

-- ALTER TABLE EMPLOYEE ADD FOREIGN KEY(BANK_NAME) REFERENCES BANKS(BANK_NAME);

-- CREATE TABLE CUSTOMERS(CUS_SSN INTEGER,CNAME VARCHAR(100),STREET VARCHAR(100),CITY VARCHAR(100),EMP_SSN INTEGER,PRIMARY KEY(CUS_SSN),FOREIGN KEY(EMP_SSN) REFERENCES EMPLOYEE(EMP_SSN));

-- CREATE TABLE ACCOUNTS(ACC_NO INTEGER,BALANCE DOUBLE, LAST_ACCESS_DATE DATE, ACC_TYPE VARCHAR(100),OVERDRAFT DOUBLE,INTEREST_RATE INTEGER,ACC_LIMIT DOUBLE,RATE_OF_INTEREST INTEGER,CREDIT_SCORE INTEGER,PRIMARY KEY(ACC_NO));

-- CREATE TABLE MAINTAINS(CUS_SSN INTEGER,ACC_NO INTEGER,FOREIGN KEY(CUS_SSN) REFERENCES CUSTOMERS(CUS_SSN),FOREIGN KEY(ACC_NO) REFERENCES ACCOUNTS(ACC_NO));

-- CREATE TABLE TRANSACTIONS(ACC_NO INTEGER,TRANS_TYPE VARCHAR(100),AMOUNT DOUBLE,DATE_OF_TRANSACTION DATE,FOREIGN KEY(ACC_NO) REFERENCES ACCOUNTS(ACC_NO));

-- CREATE TABLE LOANS(LOAN_ID INTEGER,LOAN_AMOUNT DOUBLE,PRIMARY KEY(LOAN_ID),OWE double);

-- CREATE TABLE PAYMENTS(LOAN_ID INTEGER,PAYMENT_ID INTEGER, PAY_AMOUNT DOUBLE, DATE_OF_PAYMENT DATE,FOREIGN KEY(LOAN_ID) REFERENCES LOANS(LOAN_ID));
-- CREATE TABLE TAKES(CUS_SSN INTEGER,LOAN_ID INTEGER, FOREIGN KEY(CUS_SSN) REFERENCES CUSTOMERS(CUS_SSN),FOREIGN KEY (LOAN_ID) REFERENCES LOANS(LOAN_ID));
-- INSERT INTO BANKS VALUES('CHASE_150','DALLAS',105);
-- select * from banks;
 -- INSERT INTO EMPLOYEE VALUES(110,'WARRIOR USSOP',226337992,'KAYA','2009-7-16',14,'CHASE_125');
-- desc banks;
-- alter table banks drop foreign key banks_ibfk_1;
-- insert into customers values(901,'Naruto uzumaki','105 e arkansas','arlington',101)

-- select * from customers;
-- insert into accounts values(515,0,NULL,NULL,NULL,NULL,NULL,NULL,NULL);
-- INSERT INTO MAINTAINS VALUES(915,515);
-- select * from customers c join maintains m on c.cus_ssn=m.cus_ssn;

-- update accounts set balance=105 ,last_access_date=now() where acc_no=503;
-- select * from banks;
 select * from employee;
-- select * from customers;
--  select * from accounts;
-- select * from maintains;

 -- select * from transactions;
--  select * from loans;
 -- select * from payments;
-- select * from maintains;

-- insert into transactions values(503,'deposit',400,now());
-- delete from transactions;
-- select * from transactions;
-- select * from maintains;
-- select * from payments;


triggers

create trigger flagger1
after insert 
on accounts for each row
begin
if overdraft>0 then
print 'Hey recent transaction has exceeded his overdraft amount' ;
endif;
end;

create trigger flagger2
after insert 
on accounts for each row
begin
if overdraft>0 then
print 'Hey recent transaction has exceeded his overdraft amount' ;
endif;
end;
